<section class="video-carousel">
  <div class="vc-heading">
    <div class="container">
      <div class="vcheading-in">
        <h2>
          <span data-aos="fade-up" data-aos-duration="1000">{{ section.settings.heading_top }}</span>
          <span data-aos="fade-up" data-aos-duration="1000" data-aos-delay="50">{{ section.settings.heading_bottom }}</span>
        </h2>
      </div>
    </div>
  </div>
  <div class="vc-carousel">
    <div class="owl-carousel owl-theme">
      {% for block in section.blocks %}
        <div class="item">
          <div class="vci-item">
            <div class="vcitem-video">
              {% if block.settings.video_link != blank %}
                {{ block.settings.video_link | video_tag: autoplay: false, loop: true, muted: false, controls: false, playsinline: true, class: 'img ab'
                }}
                <button class="video-control" aria-label="Video Play Button">
                  <span class="video-control-play">
                    <span class="video-control-symbol" aria-hidden="true"><img
                        width="100%"
                        height="auto"
                        src="https://cdn.shopify.com/s/files/1/0752/8015/4881/files/Polygon_1.svg?v=1759301174"
                        alt=""></span>
                  </span>
                  <span class="video-control-pause">
                    <span class="video-control-symbol" aria-hidden="true"><img
                        width="100%"
                        height="auto"
                        src="https://cdn.shopify.com/s/files/1/0752/8015/4881/files/pause-svgrepo-com.svg?v=1759998102"
                        alt=""></span>
                  </span>
                </button>
              {% endif %}
              {% if section.settings.video_img != blank %}
                <img
                  width="100%"
                  src="{{ block.settings.video_img |  img_url: 'master' }}"
                  alt="{{ block.settings.video_img.title }}"
                  class="img ab">
              {% endif %}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</section>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const wraps = document.querySelectorAll(".vcitem-video");

  wraps.forEach((wrap) => {
    const video = wrap.querySelector("video");
    const btn = wrap.querySelector("button.video-control");
    if (!video || !btn) return;

    let hideTimer = null;

    const showBtn = () => {
      wrap.classList.remove("controls-hidden");
      if (hideTimer) clearTimeout(hideTimer);
    };

    const scheduleHide = () => {
      if (hideTimer) clearTimeout(hideTimer);
      hideTimer = setTimeout(() => {
        if (!video.paused && !video.ended) {
          wrap.classList.add("controls-hidden");
        }
      }, 10); // hide after 1s of playing
    };

    const setState = (playing) => {
      btn.classList.toggle("playing", playing);
      btn.setAttribute("aria-pressed", playing ? "true" : "false");
      if (playing) scheduleHide(); else showBtn();
    };

    // Click to play/pause
    btn.addEventListener("click", () => {
      if (video.paused || video.ended) {
        // optional: pause others
        document.querySelectorAll(".vcitem-video video").forEach((v) => {
          if (v !== video && !v.paused) v.pause();
        });
        video.play().catch(() => {});
      } else {
        video.pause();
      }
    });

    // Sync state with native controls/autoplay
    video.addEventListener("play",   () => setState(true));
    video.addEventListener("pause",  () => setState(false));
    video.addEventListener("ended",  () => setState(false));

    // Show on hover/move; re-hide after mouse leaves if still playing
    wrap.addEventListener("mouseenter", showBtn);
    wrap.addEventListener("mousemove", showBtn);
    wrap.addEventListener("mouseleave", () => {
      if (!video.paused && !video.ended) scheduleHide();
    });

    // Keep visible while keyboard focusing the button
    btn.addEventListener("focusin", showBtn);
    btn.addEventListener("focusout", () => {
      if (!video.paused && !video.ended) scheduleHide();
    });
  });
});
</script>



{% schema %}
  {
    "name": "Video-Section",
    "settings": [
      {
        "type": "text",
        "id": "heading_top",
        "label": "Top Heading"
      }, {
        "type": "text",
        "id": "heading_bottom",
        "label": "Bottom Heading"
      }
    ],
    "blocks": [
      {
        "name": "UGC Videos",
        "type": "ugc-videos",
        "settings": [
          {
            "type": "image_picker",
            "id": "video_img",
            "label": "Upload Image"
          }, {
            "type": "video",
            "id": "video_link",
            "label": "Upload Video"
          }
        ]
      }
    ]
  }
{% endschema %}
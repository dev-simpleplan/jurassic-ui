<style>

  /* Side Cart */

  .sideCart {
    position: fixed;
    right: 0;
    top: 0;
    width: 100%;
    height: 100vh;
    background: #0000005E;
    z-index: 999;
  }

  .sideCart:not(.active) {
    display: none;
  }

  .sc-wrapper {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  .sc-head {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .side-cart {
    background: #FFFFFF;
    box-shadow: 0 0 6px 0 #C3C3C34D;
    width: 40%;
    height: 100%;
    margin-left: auto;
    padding: 28px 20px 24px 36px;
  }
  .sc-close {
    width: 24px;
    height: 24px;
    display: flex;
    cursor: pointer;
  }
  .sc-close svg {
    width: 100%;
    height: auto;
    max-height: 100%;
  }
  .sch-left p {
    font-weight: 700;
    font-size: 12px;
    line-height: 120%;
    letter-spacing: 1px;
    text-transform: uppercase;
    color: #1A1A1A;

  }
  .sch-left p span {
    font-weight: 400;
    font-size: 12px;
    line-height: 136%;
    letter-spacing: 0.02em;
    text-transform: none;
  }
  .sch-left {
    display: flex;
    align-items: center;
    gap: 11px;
  }
  .sch-left a {
    font-weight: 400;
    font-size: 12px;
    line-height: 110%;
    letter-spacing: 0;
    text-decoration: underline;
    text-decoration-style: solid;
    text-underline-offset: 2px;
    text-decoration-thickness: 0;
    color: #1A1A1A;
  }
  .sc-in {
    margin-top: auto;
    margin-bottom: auto;
  }
  .side-cart-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 26px;
  }
  .side-cart-empty h3 {
    font-weight: 500;
    font-size: 32px;
    line-height: 110%;
    letter-spacing: 0;
    text-align: center;
    text-transform: capitalize;
    color: #202322;
  }
  .side-cart-empty p {
    font-weight: 400;
    font-size: 12px;
    line-height: 140%;
    letter-spacing: 0;
    text-align: center;
    vertical-align: middle;
    color: #1A1A1A;
  }
  .jf-icon {
    display: flex;
    max-width: 120px;
    width: 100%;
  }
  .jf-icon svg {
    width: 100%;
    height: auto;
    max-height: 100%;
  }
  .sce-txt {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 8px;
  }

  .sc-in .cart-item {
    display: flex;
    align-items: stretch;
    justify-content: space-between;
    gap: 8px;
  }
  img.cart-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    inset: 0;
  }
  .cart-item-image {
    position: relative;
    width: 16%;
    padding-top: 16%;
    border-radius: 6px;
    overflow: hidden;
  }

  p.cart-item-title {
    font-weight: 500;
    font-size: 16px;
    line-height: 100%;
    letter-spacing: -0.02em;
    text-transform: capitalize;
    color: #151515;
  }
  p.cart-discount-percent {
    font-weight: 600;
    font-size: 12px;
    line-height: 100%;
    letter-spacing: -0.03em;
    display: inline-flex;
    text-transform: capitalize;
    color: #397E1B;
    padding: 4px;
    border: 1px solid #397E1B;
    border-radius: 16px;
    align-items: center;
    justify-content: center;
  }

  .cart-item-info {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    gap: 8px;
    align-items: flex-start;
  }

  .cart-item-info.hasDiscount {
    justify-content: space-between;
  }

  p.cart-price {
    font-weight: 500;
    font-size: 12px;
    line-height: 136%;
    letter-spacing: -0.02em;
    color: #151515;
  }

  span.cart-compare-price {
    font-weight: 400;
    text-align: right;
    vertical-align: middle;
    text-decoration: line-through;
    color: #6B6B6B;
    margin-right: 6px;
  }

</style>

<div class="side-cart">
  <div class="sc-wrapper">
    <div class="sc-head">
      <div class="sch-left">
        <p>
          Cart
          <span>({{ cart.item_count }} items)</span>
        </p>
        {% if cart.item_count > 0 %}
          <a href="{{ routes.cart_url }}">View Cart</a>
        {% endif %}
      </div>
      <div class="sc-close">
        {% render 'cross' %}
      </div>
    </div>
    <div class="sc-in">
      {% if cart.item_count > 0 %}
        <div class="side-cart-with-items"></div>
      {% else %}
        <div class="side-cart-empty">
          <div class="jf-icon">
            {% render 'jf' %}
          </div>
          <div class="sce-txt">
            <h3>uh-oh!</h3>
            <p>You have an empty basket.</p>
          </div>
        </div>

      {% endif %}
    </div>
  </div>
</div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
  const sideCart = document.querySelector('.sideCart');
  const cartItemsContainer = document.querySelector('.sc-in');
  const cartItemsWrapper = document.querySelector('.side-cart-with-items');

  function formatMoney(cents) {
    const value = (cents / 100).toFixed(2);
    const symbol = window.currencySymbol || '';
    const code = window.activeCurrency || '';
    return `${symbol}${value} ${code}`;
  }

  document.querySelector('.cart-open')?.addEventListener('click', function() {
    sideCart.classList.add('active');
    loadCartItems();
  });

  document.querySelector('.sc-close')?.addEventListener('click', function() {
    sideCart.classList.remove('active');
  });

  document.querySelectorAll('form[action$="/cart/add"]').forEach(form => {
    const addToCartBtn = form.querySelector('#add-to-cart');
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const formData = new FormData(form);

        fetch(window.Shopify.routes.root + 'cart/add.js', {
          method: 'POST',
          body: formData
        })
        .then(res => res.json())
        .then(() => {
          sideCart.classList.add('active');
          loadCartItems();
        })
        .catch(err => console.error('Error adding to cart:', err));
      });
    }
  });

  // Load Cart Items with Compare Price
  async function loadCartItems() {
    try {
      const res = await fetch(window.Shopify.routes.root + 'cart.js');
      const cart = await res.json();

      if (!cartItemsContainer) return;

      if (cart.items.length === 0) {
        cartItemsContainer.innerHTML = `
        <div class="side-cart-empty">
          <div class="jf-icon">
            {% render 'jf' %}
          </div>
          <div class="sce-txt">
            <h3>uh-oh!</h3>
            <p>You have an empty basket.</p>
          </div>
        </div>`;
        return;
      }

      // For each cart item, fetch compare_at_price from product API
      const itemHtmlPromises = cart.items.map(async (item, index) => {
        let compareAtPrice = null;

        try {
          const productRes = await fetch(`/products/${item.handle}.js`);
          const productData = await productRes.json();

          const matchedVariant = productData.variants.find(v => v.id === item.variant_id);
          if (matchedVariant && matchedVariant.compare_at_price) {
            compareAtPrice = (matchedVariant.compare_at_price).toFixed(2); // convert to 
          }
        } catch (err) {
          console.warn(`Could not fetch product data for ${item.title}:`, err);
        }

        const hasDiscount = compareAtPrice && compareAtPrice > item.final_line_price;
        let discountPercent = 0;
        if (hasDiscount) {
          discountPercent = Math.round(((compareAtPrice - item.final_line_price) / compareAtPrice) * 100);
        }

        return `
          <div class="cart-item" data-line="${index + 1}">
            <div class="cart-item-image">
              <img src="${item.image}" alt="${item.title}" class="cart-image" />
            </div>
            <div class="cart-item-info ${hasDiscount ? `hasDiscount` : ''}">
              <p class="cart-item-title">${item.title}</p>
              ${hasDiscount ? `<p class="cart-discount-percent">${discountPercent}% Off</p>` : ''}
              <p class="cart-price">
                ${hasDiscount ? `<span class="cart-compare-price">${formatMoney(compareAtPrice)}</span>` : ''}
                ${formatMoney(item.final_line_price)}
              </p>
            </div>
            <div class="cart-qty">
                <button class="qty-btn minus" data-line="${index + 1}" data-qty="${item.quantity}">−</button>
                <span class="qty-count">${item.quantity}</span>
                <button class="qty-btn plus" data-line="${index + 1}" data-qty="${item.quantity}">+</button>
              </div>
          </div>
        `;
      });

      // Wait for all items' HTML to finish loading (since we’re fetching each product)
      const allItemsHTML = await Promise.all(itemHtmlPromises);
      cartItemsWrapper.innerHTML = allItemsHTML.join('');

      attachQtyHandlers();
    } catch (err) {
      console.error('Error loading cart:', err);
    }
  }

  function updateCartItem(line, quantity) {
    fetch(window.Shopify.routes.root + 'cart/change.js', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ line, quantity })
    })
    .then(res => res.json())
    .then(() => loadCartItems())
    .catch(err => console.error('Error updating cart:', err));
  }

  function attachQtyHandlers() {
    const plusBtns = cartItemsContainer.querySelectorAll('.qty-btn.plus');
    const minusBtns = cartItemsContainer.querySelectorAll('.qty-btn.minus');

    plusBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const line = Number(btn.dataset.line);
        const qtyCount = btn.closest('.cart-item').querySelector('.qty-count');
        const currentQty = Number(qtyCount.textContent);
        updateCartItem(line, currentQty + 1);
      });
    });

    minusBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const line = Number(btn.dataset.line);
        const qtyCount = btn.closest('.cart-item').querySelector('.qty-count');
        const currentQty = Number(qtyCount.textContent);
        const newQty = currentQty > 1 ? currentQty - 1 : 0;
        updateCartItem(line, newQty);
      });
    });
  }

  loadCartItems();
  });
</script>


{% schema %}
  {
    "name": "Side Cart",
    "class": "sideCart",
    "tag": "section",
    "settings": []
  }
{% endschema %}
<discount-field class="discount-field" data-discount="{%- for discount in cart.discount_applications -%}{%- if discount.type == 'discount_code' -%}{{ discount.title }}{%- endif -%}{%- unless forloop.last -%},{%- endunless -%}{%- endfor -%}">

  <form class="discount-field__form">
    <input
      type="text"
      name="discount"
      autocomplete="off"
      placeholder="Enter discount code"
      class="discount-field__input">
    <button type="submit" class="discount-field__submit-btn">Apply</button>
  </form>

  <div class="discount-field__discounts-list">
    {% for discount in cart.discount_applications %}
      {% if discount.type == "discount_code" %}
        <button
          type="button"
          class="discount-field__remove-btn"
          data-discount="{{ discount.title }}"
          aria-label="Remove {{ discount.title }} discount">
          {{ discount.title }}
          {{ 'icon-close-small.svg' | inline_asset_content }}
        </button>
      {% endif %}
    {% endfor %}
  </div>
</discount-field>

<script>
  class DiscountField extends HTMLElement {
  constructor() {
    super();
    this.form = this.querySelector('.discount-field__form');
    this.input = this.querySelector('input[name="discount"]');
    this.submitButton = this.querySelector('.discount-field__submit-btn');

    this.form.addEventListener('submit', this.handleApplyDiscount.bind(this));

    this.querySelectorAll('.discount-field__remove-btn').forEach(button => {
      button.addEventListener('click', this.handleRemoveDiscount.bind(this));
    });
  }

    handleApplyDiscount(e) {
  e.preventDefault();
  const discountCode = this.input.value.trim();
  if (!discountCode) return;

  this.applyDiscountInBackground(discountCode);
  }

  async applyDiscountInBackground(discountCode) {
  this.setLoading(true);
  try {
    console.log(`🎟 Applying discount: ${discountCode}`);

    // 1️⃣ Hit Shopify’s discount endpoint in background (sets discount session)
    await fetch(`/discount/${encodeURIComponent(discountCode)}?redirect=/cart`, {
      method: 'GET',
      credentials: 'include'
    });

    // 2️⃣ Wait briefly for session to update
    await new Promise(resolve => setTimeout(resolve, 800));

    // 3️⃣ Re-render side cart
    await this.reRenderCart();

    console.log('✅ Discount applied and side cart updated');
    this.input.value = '';
  } catch (error) {
    console.error('❌ Error applying discount:', error);
  } finally {
    this.setLoading(false);
  }
  }


    // handleApplyDiscount(e) {
    //     e.preventDefault();
    //     const discountCode = this.input.value.trim();
    //     if (!discountCode) return;

    //     // Save entered code for display
    //     localStorage.setItem('appliedDiscount', discountCode);

    //     // Redirect to Shopify's built-in discount URL
    //     window.location.href = `/discount/${encodeURIComponent(discountCode)}?redirect=/cart`;
    // }


  handleRemoveDiscount(e) {
    e.preventDefault();
    const discountToRemove = e.currentTarget.dataset.discount;
    const existingDiscounts = this.dataset.discount || '';
    const discountsArray = existingDiscounts ? existingDiscounts.split(',') : [];
    const updatedDiscounts = discountsArray.filter(d => d !== discountToRemove);

    this.updateCart(updatedDiscounts.join(','));
  }

  async updateCart(discountCodes) {
    this.setLoading(true);

    try {
      const response = await fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          discount_codes: discountCodes,
        })
      });

      const cart = await response.json();
      console.log('Updated cart with discounts:', cart);
      this.input.value = '';

      await this.reRenderCart(cart);
    } catch (error) {
      console.error('Error updating discount:', error);
    } finally {
      this.setLoading(false);
    }
  }

  setLoading(isLoading) {
    if (isLoading) {
      this.classList.add('discount-field__loading');
      this.submitButton.disabled = true;
      this.input.disabled = true;
    } else {
      this.classList.remove('discount-field__loading');
      this.submitButton.disabled = false;
      this.input.disabled = false;
    }
  }

  async reRenderCart() {
  try {
    const response = await fetch('/?section_id=side-cart');
    const text = await response.text();
    const html = new DOMParser().parseFromString(text, 'text/html');
    const newCart = html.querySelector('.side-cart');
    console.log(newCart);
    const sideCart = document.querySelector('.side-cart');
    if (sideCart && newCart) {
      sideCart.innerHTML = newCart.innerHTML;
    }
  } catch (error) {
    console.error('Error re-rendering cart:', error);
  }
  }



  formatMoney(cents) {
    const value = (cents / 100).toFixed(2);
    const symbol = window.currencySymbol || '';
    const code = window.activeCurrency || '';
    return `${symbol}${value} ${code}`;
  }
  }

  customElements.define('discount-field', DiscountField);
</script>